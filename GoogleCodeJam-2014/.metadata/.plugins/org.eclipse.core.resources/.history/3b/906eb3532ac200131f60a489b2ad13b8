import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Main {
	public static void main(String[] args) throws FileNotFoundException {
		// Configurate
		String inputFile = "./S1.in";
		String outputFile = "./S1.out";
		
		// Open reader and writer
		Scanner scanner = new Scanner(new File(inputFile));
		PrintWriter pw = new PrintWriter(new File(outputFile));
		
		// Get number of tests
		int numberOfTests = scanner.nextInt();
		scanner.nextLine();
		
		// Solve the tests
		for (int i = 0; i < numberOfTests; i++) {
			pw.println(_solve(scanner, i + 1, numberOfTests));
		}
		
		// Close the reader and the writer
		scanner.close();
		pw.flush();
	}

	private static String _solve(Scanner scanner, int testNumber, int numberOfTests) {
		// Read the input
		double amountOfCookies = scanner.nextDouble();
		double extraCookiesPerSecond = scanner.nextDouble();
		double resultAmountOfCookies = scanner.nextDouble();
		scanner.nextLine();
		
		System.out.println("Amount Of Cookies: " + amountOfCookies);
		System.out.println("Extra Cookies Per Second: " + extraCookiesPerSecond);
		System.out.println("Result Amount Of Cookies: " + resultAmountOfCookies);
		
		System.out.println("Result: " + _calculateTimeToReachResult(amountOfCookies, 2, extraCookiesPerSecond, 0, 500, resultAmountOfCookies));
		
		// Determine the result
		//String calculatedResult = _calculateResult(result, testNumber);
		//System.out.println(calculatedResult);
		//return calculatedResult;
		return "";
	}
	
	private static double _calculateTimeToReachResult(double cookieCount, double cookiesPerSecBase, double cookiesPerSecExtra, int farmCount, double farmPrice, double result) {
		double timeNeeded = 0.0;
		
		for (int i = 0; i <= farmCount; i++) {
			timeNeeded += _calculateSecondsNeededForFarm(cookieCount, i, cookiesPerSecBase, cookiesPerSecExtra);
		}
		
		return timeNeeded;
	}
	
	private static double _calculateSecondsNeededForFarm(double cookieCount, int farmCount, double cookiesPerSecBase, double cookiesPerSecExtra) {
		return cookieCount / (cookiesPerSecBase + (farmCount * cookiesPerSecExtra));
	}
	
	private static String _calculateResult(List<String> result, int testNumber) {
		return "";
	}
}