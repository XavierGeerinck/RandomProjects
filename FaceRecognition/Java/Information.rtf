{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Haar Features:\
Shapes \'97> features \'97> rect in the xml file, the numbers.\
\
Calculator: Get the white rectangle and subtract the black ones, then ask if that difference is greater or less than the threshold. if it is \'97> add it to a sum. And then you check if that sum is within another threshold.\
\
Cascade file has different stages.\
\
It is really bad in detecting profiles in faces.\
\
Integral sum of the parts of the image. This gives quick calculation for the image.\
\
After it is done it looks for overlapping features, this to remove false negatives\
\
Rectangles are: 24 x 24px\
\
black average - white average, \'97> check threshold \'97> add sum to the stage value \'97> if at the end of the stage the value is within the next threshold then go to the next stage, else stop.\
\
Classes for the different features (2 rectangles, 3 Rectangles, \'85)\
\
// Steps Program\
[DONE] 1. Load image\
[DONE] 2. Convert image to grayscale\
3. Load the feature\
4. Go through the feature it\'92s stages\
4.1 parse the internalNode\
4.2 get the rectangles for that feature\
4.3 draw the rectangle\
4.4 calculate the rectangle it\'92s sum\
4.5 compare the rectangle it\'92s sum to the threshold\
4.6 add the left leaf or right leaf depending on the threshold comparing\
4.7 check if the stage sum of all the rectangles matches with the stageThreshold\
5. if we passed all stages, draw a rectangle\
\
// Info\
If the rectangle sum passes the threshold, then we add the right_value, else we add the left_value\
\
// Structure leafValues\
\
// Structure InternalNodes\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 <internalNodes>0 -1 0 -3.1511999666690826e-02</internalNodes>\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 <node.left> <node.right> <node.featureIdx> <node.treshold>\
\
// Structure Rect\
<_>\
    <rects>\
        <_>4 6 14 6 -1.</_>\
        <_>4 6 7 3 2.</_>\
        <_>11 9 7 3 2.</_>\
    </rects>\
</_>\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 <x> <y> <width> <height> <weight>\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 The first 4 numbers are used for the integral sum array, they get the x and y coordinate with the heights and widths.\
\
the last number (-1, 2., 2. in this example) is the weight (used to calculate the feature)\
float ret = rect[0].weight * CALC_SUM(p[0], _offset) + rect[1].weight * CALC_SUM(p[1], _offset)}