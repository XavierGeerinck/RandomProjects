import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;


public class Main {
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new File("./STDIN.txt"));
		
		int numberOfTests = scanner.nextInt();
		scanner.nextLine();
		
		processTests(scanner, numberOfTests);
	}

	private static void processTests(Scanner scanner, int numberOfTests) {
		for (int i = 0; i < numberOfTests; i++) {
			int aantalLoketten = scanner.nextInt();
			scanner.nextLine();
			
			int aantalBurgers = scanner.nextInt();
			scanner.nextLine();
			
			ArrayList<Burger> burgers = new ArrayList<Burger>();
			ArrayList<Loket> loketten = new ArrayList<Loket>();
			
			for (int burgerNummer = 0; burgerNummer < aantalBurgers; burgerNummer++) {
				int binnenkomstUur = scanner.nextInt();
				int binnenkomstMinuut = scanner.nextInt();
				scanner.nextLine();
				
				int aantalMinutenNodig = scanner.nextInt();
				scanner.nextLine();
				
				burgers.add(new Burger(burgerNummer, binnenkomstUur, binnenkomstMinuut, aantalMinutenNodig));
				loketten.add(new Loket(binnenkomstUur * 60 + binnenkomstMinuut + aantalMinutenNodig));
			}
			
			_processTestCase(i + 1, burgers, aantalLoketten, loketten);
		}
	}

	private static void _processTestCase(int testNumber, ArrayList<Burger> burgers, int aantalLoketten, ArrayList<Loket> loketten) {
		// Sort, from smaller to higher
        Collections.sort(burgers, new Comparator<Burger>() {
			@Override
			public int compare(Burger o1, Burger o2) {
				int minutesO1 = o1.getHours() * 60 + o1.getMinutes();
				int minutesO2 = o2.getHours() * 60 + o2.getMinutes();
				
				if (minutesO1 < minutesO2) {
					return -1;
				} else if(minutesO1 > minutesO2) {
					return 1;
				}
				
				return 0;
			}
        });

        
        
        System.out.println("Loketten");
        System.out.println("===============");
        _printList2(loketten);
        System.out.println("===============");
        
        System.out.print("" + testNumber + " ");
        
        // Print employee 0
        System.out.print(burgers.get(0).getHours() + " " + burgers.get(0).getMinutes() + " | ");
        
        // Print employee 1
        System.out.print(burgers.get(1).getHours() + " " + burgers.get(1).getMinutes() + " | ");
        
        int wachtTijd = 0;
        
        for (int i = 0; i < burgers.size() - 2; i++) {
        	int binnenKomst = burgers.get(2 + i).getHours() * 60 + burgers.get(2 + i).getMinutes();
        	int loketVrij = loketten.get(i).getHour() * 60 + loketten.get(i).getMinute();
        	
        	if ((loketVrij - binnenKomst) > wachtTijd) {
        		wachtTijd = loketVrij - binnenKomst;
        	}
        	
        	System.out.print(loketten.get(i).getHour() + " " + loketten.get(i).getMinute() + " | ");
        }
        
        System.out.print("" + wachtTijd);
        System.out.println();
        
        _printList(burgers);
	}
	
	private static ArrayList<Loket> sortLoket(ArrayList<Loket> locket, int sortNumber, int sortNumber2) {
		ArrayList<Loket> locketsServed = new ArrayList<Loket>();
		locketsServed.add(locket.get(sortNumber));
		locketsServed.add(locket.get(sortNumber2));
        
        // Sort, from smaller to higher
        Collections.sort(locketsServed, new Comparator<Loket>() {
			@Override
			public int compare(Loket o1, Loket o2) {
				int minutesO1 = o1.getHour() * 60 + o1.getMinute();
				int minutesO2 = o2.getHour() * 60 + o2.getMinute();
				
				if (minutesO1 < minutesO2) {
					return -1;
				} else if(minutesO1 > minutesO2) {
					return 1;
				}
				
				return 0;
			}
        });
        
        return locketsServed;
	}
	
	private static void _printList(ArrayList<Burger> burgers) {
		for (Burger b : burgers) {
			System.out.println(b.getHours() + " : " + b.getMinutes());
		}
	}
	
	private static void _printList2(ArrayList<Loket> burgers) {
		for (Loket b : burgers) {
			System.out.println(b.getHour() + " : " + b.getMinute());
		}
	}
	
	public static class Loket {
		private int hour;
		private int minute;
		
		public Loket(int minutes) {
			int calculatedHours = minutes / 60;
			int calculatedMinutes = minutes - (calculatedHours * 60);
			
			this.hour = calculatedHours;
			this.minute = calculatedMinutes;
		}

		public int getHour() {
			return hour;
		}

		public void setHour(int hour) {
			this.hour = hour;
		}

		public int getMinute() {
			return minute;
		}

		public void setMinute(int minute) {
			this.minute = minute;
		}
	}
	
	public static class Burger {
		private int id;
		private int hours;
		private int minutes;
		private int timeNeeded;
		
		public Burger(int id, int hours, int minutes, int timeNeeded) {
			this.id = id;
			this.hours = hours;
			this.minutes = minutes;
			this.timeNeeded = timeNeeded;
		}

		public int getId() {
			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		public int getHours() {
			return hours;
		}

		public void setHours(int hours) {
			this.hours = hours;
		}

		public int getMinutes() {
			return minutes;
		}

		public void setMinutes(int minutes) {
			this.minutes = minutes;
		}

		public int getTimeNeeded() {
			return timeNeeded;
		}

		public void setTimeNeeded(int timeNeeded) {
			this.timeNeeded = timeNeeded;
		}
	}
}